#!/bin/bash
#
# @Author: akliuxingyuan
# @Birth: 2021-04-13 15:42:37
# @Update: 2021-11-26 15:04:28
# @Description: share only certain files to wine container by manage a directory with softlink
# @Tips: Work with File Manager Actions is much better (link: https://gitlab.gnome.org/GNOME/filemanager-actions
#

set -e

readonly CURRENT_PATH=$(pwd)

mysource=$CURRENT_PATH
mytarget=$HOME/WineFiles # maintained directory

function show_help() {
    echo "Usage:"
    echo "      s2w [options...] [target...]"
    echo "      s2w [target...]"
    echo ""
    echo "Options:"
    echo "      -a, --add                               add file or directory to maintained directory"
    echo "      -d, --delete                            delete file or directory from maintained directory"
    echo "      -l, --list                              list maintained directory contents"
    echo "      -h, --help                              show help message"
    echo ""
    echo "If no options are provided 's2w add [target...]' will be performed"
    echo ""
    echo "Examples:"
    echo "      s2w file1 /etc/hosts /usr/share/fonts"
    echo "      s2w -a file"
    echo "      s2w --add \"file1 /tmp/file2 dir1 /tmp/dir2\""
    echo "      s2w -d \"file1 dir1\""
    echo "      s2w --list"
}

function check_target(){
    if [[ ! -d $mytarget ]]; then
        read -r -p "Mkdir $mytarget? [Y/n] " input
        case $input in
            [yY][eE][sS]|[yY])
                mkdir "$mytarget"
                ;;

            [nN][oO]|[nN])
                echo "You should have certain maintained target: $mytarget"
                exit 1
                ;;

            *)
                echo "Invalid input..."
                exit 1
                ;;
        esac
    fi
}

function add_link(){
    check_target
    mysource=$CURRENT_PATH
    for arg in "${@:1}"; do
        if [[ ! -f "$arg" && ! -d "$arg" ]]; then
            echo "no such file or directory! $arg"
            exit 1
        elif [[ $arg = /* ]]; then
            mysource=$arg    # absolute
        else
            mysource=$CURRENT_PATH/$arg    # relative
        fi

        echo "$mysource -> $mytarget/${mysource##*/}"

        if [[ -f $mysource ]]; then
            ln -sf "$mysource" "$mytarget"/"${mysource##*/}"
        elif [[ -d $mysource ]]; then
            ln -snf "$mysource" "$mytarget"/"${mysource##*/}"
        else
            echo "not supported!"
            exit 1
        fi
    done
}

function list_contents(){
    echo "$mytarget:"
    echo ""
    for file in "$mytarget"/*; do
        if [[ -L $file ]]; then
            tfile=$(readlink "$file")
            file_dirname=$(dirname "$tfile")
            file_basename=$(basename "$tfile")
            file_name=$(basename "$file")
            if [[ ! -e "$file" ]]; then    # broken symlink
                echo -e "\033[31m \033[0m\033[36m${file_name}\033[0m → \033[31m$tfile\033[0m"
            else
                if [[ -d $tfile ]]; then
                    echo -e "\033[36m ${file_name}\033[0m → \033[36m${file_dirname}/\033[0m\033[34m${file_basename}\033[0m"
                else
                    echo -e "\033[36m ${file_name}\033[0m → \033[36m${file_dirname}/\033[0m${file_basename}"
                fi
            fi
        elif [[ -d $file ]]; then
            echo -e "\033[34m $file\033[0m"
        else
            echo -e " $file"
        fi
    done
}

function delete_link(){
    for arg in "${@:1}"; do
        if [[ $arg = /* && $(dirname "$arg") = "$mytarget" ]]; then
            if [[ -d $arg && ! -L $arg ]]; then
                rm -irf "$arg"
            else
                rm "$arg"
            fi
            echo "delete $arg"
        elif [[ -f $mytarget/$arg || -d $mytarget/$arg ]]; then
            if [[ -d $mytarget/$arg && ! -L $mytarget/$arg ]]; then
                rm -irf "$mytarget"/"$arg"
            else
                rm "$mytarget"/"$arg"
            fi
            echo "delete $mytarget/$arg"
        else
            echo "file not found"
        fi
    done
}

if [[ $# -eq 0 ]]; then
    echo "need more parameters!"
    echo ""
    show_help
    exit 0
fi

ARGS=$(getopt -o hla:d: --long help,list,add:,delete: --name "$0" -- "$@")
if [ $? != 0 ]; then
    echo "Terminating..."
    exit 1
fi

eval set -- "${ARGS}"

while true
do
    case "$1" in
        -h|--help)
            show_help
            shift
            ;;

        -l|--list)
            list_contents
            shift
            ;;

        -a|--add)
            add_link "$2"
            shift 2
            ;;

        -d|--delete)
            delete_link "$2"
            shift 2
            ;;

        --)
            shift
            break
            ;;

        *)
            echo "implemented option: $1"
            exit 1
            ;;
    esac
done

# rest args
for arg in "$@"
do
    add_link "$arg"
done
